@page "/mutate"
@inject Fcl.Net.Core.Fcl Fcl
@inject ISnackbar Snackbar

<PageTitle>Mutate</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Mutate</MudText>

<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudCard>
            <MudCardContent>
                <MudText Class="mb-8">Script: @_mutation1Script</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Disabled="@_processingMutation1" OnClick="@(async () => await Mutate1Async())" Variant="Variant.Filled" Color="Color.Primary">
                    @if (_processingMutation1)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Run Mutation</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="12" md="12">
        <MudCard>
            <MudCardContent>
                <MudText Class="mb-8">Script: @_mutation2Script</MudText>
                <MudText Class="mb-8">Parameters: test = "Hello World", testInt = 8</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Disabled="@_processingMutation2" OnClick="@(async () => await Mutate2Async())" Variant="Variant.Filled" Color="Color.Primary">
                    @if (_processingMutation2)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Run Mutation</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private bool _processingMutation1 = false;
    private bool _processingMutation2 = false;
    private Snackbar? _snackbar;
    private string _mutation1Script = @"
transaction() {
    prepare(signer: AuthAccount) {
        log(signer.address)
    }
}";

    private string _mutation2Script = @"
transaction(test: String, testInt: Int) {
    prepare(signer: AuthAccount) {
        log(signer.address)
        log(test)
        log(testInt)
    }
}";

    void ShowSnackbar(string message)
    {
        _snackbar = Snackbar.Add(message, Severity.Normal, config =>
        {
            config.VisibleStateDuration = int.MaxValue;
        });
    }

    void HideSnackbar()
    {
        if (_snackbar is null) return;
        Snackbar.Remove(_snackbar);
    }

    private async Task Mutate1Async()
    {
        _processingMutation1 = true;

        var tx = new FclMutation
            {
                Script = _mutation1Script
            };

        ShowSnackbar("Initializing...");
        var transactionId = await Fcl.MutateAsync(tx);
        HideSnackbar();

        ShowSnackbar("Awaiting Sealing...");
        var result = await Fcl.Sdk.WaitForSealAsync(transactionId);
        HideSnackbar();

        Snackbar.Add(!string.IsNullOrEmpty(result.ErrorMessage) ? result.ErrorMessage : "Transaction Sealed!");
        _processingMutation1 = false;
    }

    private async Task Mutate2Async()
    {
        _processingMutation2 = true;

        var tx = new FclMutation
        {
            Script = _mutation2Script,
            Arguments = new List<ICadence>
            {
                new CadenceString("Hello World"),
                new CadenceNumber(CadenceNumberType.Int, "8")
            }
        };

        ShowSnackbar("Initializing...");
        var transactionId = await Fcl.MutateAsync(tx);
        HideSnackbar();

        ShowSnackbar("Awaiting Sealing...");
        var result = await Fcl.Sdk.WaitForSealAsync(transactionId);
        HideSnackbar();

        Snackbar.Add(!string.IsNullOrEmpty(result.ErrorMessage) ? result.ErrorMessage : "Transaction Sealed!");
        _processingMutation2 = false;
    }
}